
============= 1Initialized Observation Utils with Obs Spec =============

using obs modality: low_dim with keys: ['robot0_eef_quat', 'robot0_eef_hand', 'robot0_eef_pos', 'pointcloud']
using obs modality: rgb with keys: []
using obs modality: depth with keys: []
using obs modality: scan with keys: []
obs key pointcloud with shape (10000, 6)
obs key robot0_eef_hand with shape (32,)
obs key robot0_eef_pos with shape (6,)
obs key robot0_eef_quat with shape (8,)

ModuleDict(
  (obs): ObservationEncoder(
      Key(
          name=pointcloud
          shape=[10000, 6]
          modality=low_dim
          randomizer=None
          net=PointNet(
              input_dim=6
              output_dim=64
              layers=['Conv1d(6, 32, 1)', 'ReLU', 'Conv1d(32, 64, 1)', 'ReLU', 'Conv1d(64, 128, 1)', 'ReLU', 'Conv1d(128, 256, 1)', 'ReLU', 'AdaptiveMaxPool1d']
              fc_layers=['Linear(256, 64)', 'Identity']
              global_feature=True
          )
          sharing_from=None
      )
      Key(
          name=robot0_eef_hand
          shape=[32]
          modality=low_dim
          randomizer=None
          net=None
          sharing_from=None
      )
      Key(
          name=robot0_eef_pos
          shape=[6]
          modality=low_dim
          randomizer=None
          net=None
          sharing_from=None
      )
      Key(
          name=robot0_eef_quat
          shape=[8]
          modality=low_dim
          randomizer=None
          net=None
          sharing_from=None
      )
      output_shape=[110]
  )
)
number of parameters: 7.001963e+07

============= Model Summary =============
DiffusionPolicyUNetDex (
  ModuleDict(
    (policy): ModuleDict(
      (obs_encoder): ObservationGroupEncoder(
          group=obs
          ObservationEncoder(
              Key(
                  name=pointcloud
                  shape=[10000, 6]
                  modality=low_dim
                  randomizer=None
                  net=PointNet(
                      input_dim=6
                      output_dim=64
                      layers=['Conv1d(6, 32, 1)', 'ReLU', 'Conv1d(32, 64, 1)', 'ReLU', 'Conv1d(64, 128, 1)', 'ReLU', 'Conv1d(128, 256, 1)', 'ReLU', 'AdaptiveMaxPool1d']
                      fc_layers=['Linear(256, 64)', 'Identity']
                      global_feature=True
                  )
                  sharing_from=None
              )
              Key(
                  name=robot0_eef_hand
                  shape=[32]
                  modality=low_dim
                  randomizer=None
                  net=None
                  sharing_from=None
              )
              Key(
                  name=robot0_eef_pos
                  shape=[6]
                  modality=low_dim
                  randomizer=None
                  net=None
                  sharing_from=None
              )
              Key(
                  name=robot0_eef_quat
                  shape=[8]
                  modality=low_dim
                  randomizer=None
                  net=None
                  sharing_from=None
              )
              output_shape=[110]
          )
      )
      (noise_pred_net): ConditionalUnet1D(
        (mid_modules): ModuleList(
          (0-1): 2 x ConditionalResidualBlock1D(
            (blocks): ModuleList(
              (0-1): 2 x Conv1dBlock(
                (block): Sequential(
                  (0): Conv1d(1024, 1024, kernel_size=(5,), stride=(1,), padding=(2,))
                  (1): GroupNorm(8, 1024, eps=1e-05, affine=True)
                  (2): Mish()
                )
              )
            )
            (cond_encoder): Sequential(
              (0): Mish()
              (1): Linear(in_features=586, out_features=2048, bias=True)
              (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
            )
            (residual_conv): Identity()
          )
        )
        (diffusion_step_encoder): Sequential(
          (0): SinusoidalPosEmb()
          (1): Linear(in_features=256, out_features=1024, bias=True)
          (2): Mish()
          (3): Linear(in_features=1024, out_features=256, bias=True)
        )
        (up_modules): ModuleList(
          (0): ModuleList(
            (0): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(2048, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
                (1): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=586, out_features=1024, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Conv1d(2048, 512, kernel_size=(1,), stride=(1,))
            )
            (1): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0-1): 2 x Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=586, out_features=1024, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Identity()
            )
            (2): Upsample1d(
              (conv): ConvTranspose1d(512, 512, kernel_size=(4,), stride=(2,), padding=(1,))
            )
          )
          (1): ModuleList(
            (0): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(1024, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
                (1): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(256, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=586, out_features=512, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Conv1d(1024, 256, kernel_size=(1,), stride=(1,))
            )
            (1): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0-1): 2 x Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(256, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=586, out_features=512, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Identity()
            )
            (2): Upsample1d(
              (conv): ConvTranspose1d(256, 256, kernel_size=(4,), stride=(2,), padding=(1,))
            )
          )
        )
        (down_modules): ModuleList(
          (0): ModuleList(
            (0): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(46, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
                (1): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(256, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=586, out_features=512, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Conv1d(46, 256, kernel_size=(1,), stride=(1,))
            )
            (1): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0-1): 2 x Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(256, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=586, out_features=512, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Identity()
            )
            (2): Downsample1d(
              (conv): Conv1d(256, 256, kernel_size=(3,), stride=(2,), padding=(1,))
            )
          )
          (1): ModuleList(
            (0): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(256, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
                (1): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=586, out_features=1024, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
            )
            (1): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0-1): 2 x Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=586, out_features=1024, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Identity()
            )
            (2): Downsample1d(
              (conv): Conv1d(512, 512, kernel_size=(3,), stride=(2,), padding=(1,))
            )
          )
          (2): ModuleList(
            (0): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(512, 1024, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 1024, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
                (1): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(1024, 1024, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 1024, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=586, out_features=2048, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Conv1d(512, 1024, kernel_size=(1,), stride=(1,))
            )
            (1): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0-1): 2 x Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(1024, 1024, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 1024, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=586, out_features=2048, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Identity()
            )
            (2): Identity()
          )
        )
        (final_conv): Sequential(
          (0): Conv1dBlock(
            (block): Sequential(
              (0): Conv1d(256, 256, kernel_size=(5,), stride=(1,), padding=(2,))
              (1): GroupNorm(8, 256, eps=1e-05, affine=True)
              (2): Mish()
            )
          )
          (1): Conv1d(256, 46, kernel_size=(1,), stride=(1,))
        )
      )
    )
  )
)

SequenceDataset: normalizing actions...
  0%|                                                                                  | 0/254 [00:00<?, ?it/s]100%|######################################################################| 254/254 [00:00<00:00, 3243.11it/s]

============= Training Dataset =============
SequenceDataset (
	path=/media/wsw/SSD1T1/data/111hand_wiping_1-14_5actiongap_10000points.hdf5
	obs_keys=('pointcloud', 'robot0_eef_hand', 'robot0_eef_pos', 'robot0_eef_quat')
	seq_length=20
	filter_key=none
	frame_stack=1
	pad_seq_length=True
	pad_frame_stack=True
	goal_mode=none
	cache_mode=none
	num_demos=255
	num_sequences=27901
)

**************************************************
Warnings generated by robomimic have been duplicated here (from above) for convenience. Please check them carefully.
**************************************************

  0%|                                                                                  | 0/500 [00:00<?, ?it/s]  0%|1                                                                         | 1/500 [00:01<11:36,  1.40s/it]  1%|4                                                                         | 3/500 [00:01<03:22,  2.45it/s]  1%|7                                                                         | 5/500 [00:01<01:55,  4.30it/s]  1%|#                                                                         | 7/500 [00:01<01:25,  5.74it/s]  2%|#3                                                                        | 9/500 [00:02<01:27,  5.59it/s]  2%|#4                                                                       | 10/500 [00:02<01:24,  5.80it/s]  2%|#6                                                                       | 11/500 [00:02<01:25,  5.70it/s]  2%|#7                                                                       | 12/500 [00:02<01:29,  5.47it/s]  3%|#8                                                                       | 13/500 [00:02<01:21,  5.98it/s]  3%|##                                                                       | 14/500 [00:03<01:22,  5.92it/s]  3%|##1                                                                      | 15/500 [00:03<01:16,  6.36it/s]  3%|##3                                                                      | 16/500 [00:03<01:25,  5.67it/s]  3%|##4                                                                      | 17/500 [00:03<01:17,  6.27it/s]  4%|##6                                                                      | 18/500 [00:03<01:14,  6.45it/s]  4%|##7                                                                      | 19/500 [00:03<01:28,  5.41it/s]  4%|##9                                                                      | 20/500 [00:04<01:18,  6.15it/s]  4%|###                                                                      | 21/500 [00:04<01:15,  6.33it/s]  4%|###2                                                                     | 22/500 [00:04<01:11,  6.70it/s]  5%|###3                                                                     | 23/500 [00:04<01:27,  5.45it/s]  5%|###5                                                                     | 24/500 [00:04<01:16,  6.24it/s]  5%|###6                                                                     | 25/500 [00:04<01:30,  5.25it/s]  5%|###7                                                                     | 26/500 [00:05<01:30,  5.25it/s]  5%|###9                                                                     | 27/500 [00:05<01:32,  5.13it/s]  6%|####                                                                     | 28/500 [00:05<01:30,  5.20it/s]  6%|####2                                                                    | 29/500 [00:05<01:46,  4.42it/s]  6%|####3                                                                    | 30/500 [00:05<01:35,  4.91it/s]  6%|####5                                                                    | 31/500 [00:06<01:36,  4.88it/s]  6%|####6                                                                    | 32/500 [00:06<01:28,  5.31it/s]  7%|####8                                                                    | 33/500 [00:06<01:33,  5.02it/s]  7%|####9                                                                    | 34/500 [00:06<01:26,  5.40it/s]  7%|#####1                                                                   | 35/500 [00:06<01:38,  4.72it/s]  7%|#####2                                                                   | 36/500 [00:07<01:28,  5.24it/s]  7%|#####4                                                                   | 37/500 [00:07<01:23,  5.52it/s]  8%|#####5                                                                   | 38/500 [00:07<01:16,  6.03it/s]  8%|#####6                                                                   | 39/500 [00:07<01:22,  5.56it/s]  8%|#####9                                                                   | 41/500 [00:07<01:15,  6.08it/s]  9%|######2                                                                  | 43/500 [00:08<01:11,  6.38it/s]  9%|######4                                                                  | 44/500 [00:08<01:14,  6.11it/s]  9%|######5                                                                  | 45/500 [00:08<01:07,  6.73it/s]  9%|######7                                                                  | 46/500 [00:08<01:06,  6.81it/s]  9%|######8                                                                  | 47/500 [00:08<01:08,  6.64it/s] 10%|#######                                                                  | 48/500 [00:09<01:17,  5.82it/s] 10%|#######3                                                                 | 50/500 [00:09<01:10,  6.34it/s] 10%|#######4                                                                 | 51/500 [00:09<01:12,  6.18it/s] 10%|#######5                                                                 | 52/500 [00:09<01:15,  5.91it/s] 11%|#######7                                                                 | 53/500 [00:09<01:09,  6.39it/s] 11%|#######8                                                                 | 54/500 [00:10<01:22,  5.39it/s] 11%|########1                                                                | 56/500 [00:10<01:14,  5.94it/s] 11%|########3                                                                | 57/500 [00:10<01:09,  6.41it/s] 12%|########4                                                                | 58/500 [00:10<01:06,  6.61it/s] 12%|########6                                                                | 59/500 [00:10<01:21,  5.38it/s]
Traceback (most recent call last):
  File "train.py", line 646, in <module>
    main(args)
  File "train.py", line 555, in main
    important_stats = train(config, device=device, auto_remove_exp=args.auto_remove_exp, resume=args.resume)
  File "train.py", line 266, in train
    step_log = TrainUtils.run_epoch(
  File "/home/wsw/Dexcap/STEP3_train_policy/robomimic/utils/train_utils.py", line 684, in run_epoch
    info = model.train_on_batch(input_batch, epoch, validate=validate)
  File "/home/wsw/Dexcap/STEP3_train_policy/robomimic/algo/diffusion_policy.py", line 271, in train_on_batch
    policy_grad_norms = TorchUtils.backprop_for_loss(
  File "/home/wsw/Dexcap/STEP3_train_policy/robomimic/utils/torch_utils.py", line 188, in backprop_for_loss
    loss.backward(retain_graph=retain_graph)
  File "/home/wsw/anaconda3/envs/dexcap/lib/python3.8/site-packages/torch/_tensor.py", line 521, in backward
    torch.autograd.backward(
  File "/home/wsw/anaconda3/envs/dexcap/lib/python3.8/site-packages/torch/autograd/__init__.py", line 289, in backward
    _engine_run_backward(
  File "/home/wsw/anaconda3/envs/dexcap/lib/python3.8/site-packages/torch/autograd/graph.py", line 769, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
KeyboardInterrupt
